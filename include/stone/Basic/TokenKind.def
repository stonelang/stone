#ifndef TOKEN
#define TOKEN(name)
#endif

#ifndef KEYWORD
#define KEYWORD(kw) TOKEN(kw_##kw)
#endif

#ifndef DECL_KEYWORD
#define DECL_KEYWORD(kw, pretty) TOKEN(kw_##kw)
#endif

#ifndef STMT_KEYWORD
#define STMT_KEYWORD(kw) KEYWORD(kw)
#endif

#ifndef EXPR_KEYWORD
#define EXPR_KEYWORD(kw) KEYWORD(kw)
#endif

#ifndef PAT_KEYWORD
#define PAT_KEYWORD(kw) KEYWORD(kw)
#endif

#ifndef POUND_KEYWORD
#define POUND_KEYWORD(kw) TOKEN(pound_##kw)
#endif

#ifndef ACTIVE_DECL_KEYWORD
#define ACTIVE_DECL_KEYWORD(kw, pretty) DECL_KEYWORD(kw, pretty)
#endif

#ifndef RESERVED_DECL_KEYWORD
#define RESERVED_DECL_KEYWORD(kw, pretty) DECL_KEYWORD(kw, pretty)
#endif

#ifndef DEPRECATED_DECL_KEYWORD
#define DEPRECATED_DECL_KEYWORD(kw, pretty) DECL_KEYWORD(kw, pretty)
#endif

#ifndef PUNCTUATOR
#define PUNCTUATOR(name, str) TOKEN(name)
#endif

#ifndef LITERAL
#define LITERAL(name) TOKEN(name)
#endif

#ifndef MISC
#define MISC(name) TOKEN(name)
#endif

// Miscellaneous tokens
TOKEN(eof)
TOKEN(alien)
TOKEN(dollarident)
TOKEN(code_complete)
TOKEN(identifier)
TOKEN(oper_binary_unspaced)
TOKEN(oper_binary_spaced)
TOKEN(oper_postfix)
TOKEN(oper_prefix)
TOKEN(comment)
TOKEN(string_quote)
TOKEN(multiline_string_quote)
TOKEN(string_segment)

// Literals
LITERAL(integer_literal)
LITERAL(floating_literal)
LITERAL(string_literal)
LITERAL(imaginary_literal)
LITERAL(regex_literal)

// Declaration keywords
ACTIVE_DECL_KEYWORD(this, This) 
ACTIVE_DECL_KEYWORD(interface, Interface)
ACTIVE_DECL_KEYWORD(enum, Enum)
ACTIVE_DECL_KEYWORD(struct, Struct)
ACTIVE_DECL_KEYWORD(private, Private)
ACTIVE_DECL_KEYWORD(internal, Internal)
ACTIVE_DECL_KEYWORD(public, Public)
ACTIVE_DECL_KEYWORD(static, Static)
ACTIVE_DECL_KEYWORD(space, Space)
ACTIVE_DECL_KEYWORD(inline, Inline)
ACTIVE_DECL_KEYWORD(new, New)
ACTIVE_DECL_KEYWORD(const, Const)
ACTIVE_DECL_KEYWORD(stone, Stone)
ACTIVE_DECL_KEYWORD(volatile, Volatile)
ACTIVE_DECL_KEYWORD(restrict, Restrict)
ACTIVE_DECL_KEYWORD(mutable, Mutable)
ACTIVE_DECL_KEYWORD(trust, Trust)
ACTIVE_DECL_KEYWORD(delete, Delete)
ACTIVE_DECL_KEYWORD(operator, Operator)
ACTIVE_DECL_KEYWORD(fun, Fun)
ACTIVE_DECL_KEYWORD(bool, Bool)
ACTIVE_DECL_KEYWORD(auto, Auto)
ACTIVE_DECL_KEYWORD(void, Void)
ACTIVE_DECL_KEYWORD(int, Int)
ACTIVE_DECL_KEYWORD(int8, Int8)
ACTIVE_DECL_KEYWORD(int16, Int16)
ACTIVE_DECL_KEYWORD(int32, Int32)
ACTIVE_DECL_KEYWORD(int64, Int64)
ACTIVE_DECL_KEYWORD(uint, UInt)
ACTIVE_DECL_KEYWORD(uint8, UInt8)
ACTIVE_DECL_KEYWORD(byte, Byte)
ACTIVE_DECL_KEYWORD(ubyte, UByte)
ACTIVE_DECL_KEYWORD(uint16, UInt16)
ACTIVE_DECL_KEYWORD(uint32, UInt32)
ACTIVE_DECL_KEYWORD(uint64, UInt64)
ACTIVE_DECL_KEYWORD(float, Float)
ACTIVE_DECL_KEYWORD(float32, Float32)
ACTIVE_DECL_KEYWORD(float64, Float64)
ACTIVE_DECL_KEYWORD(complex32, Complex32)
ACTIVE_DECL_KEYWORD(complex64, Complex64)
ACTIVE_DECL_KEYWORD(imaginary32, Imaginary32)
ACTIVE_DECL_KEYWORD(imaginary64, Imaginary64)
ACTIVE_DECL_KEYWORD(real, Real)
ACTIVE_DECL_KEYWORD(char, Char)
ACTIVE_DECL_KEYWORD(char8, Char8)
ACTIVE_DECL_KEYWORD(char16, Char16)
ACTIVE_DECL_KEYWORD(char32, Char32)
ACTIVE_DECL_KEYWORD(string, String)
ACTIVE_DECL_KEYWORD(alias, Alias)
ACTIVE_DECL_KEYWORD(import, Import)
ACTIVE_DECL_KEYWORD(join, Join)
ACTIVE_DECL_KEYWORD(own, Own)
ACTIVE_DECL_KEYWORD(raw, Raw)
ACTIVE_DECL_KEYWORD(ref, Ref)
ACTIVE_DECL_KEYWORD(unseal, Unseal)

// Reserved declaration keywords
RESERVED_DECL_KEYWORD(type, Type)
RESERVED_DECL_KEYWORD(safe, Safe)
RESERVED_DECL_KEYWORD(any, Any)
RESERVED_DECL_KEYWORD(object, Object)
RESERVED_DECL_KEYWORD(forward, Forward)
RESERVED_DECL_KEYWORD(class, Class)
RESERVED_DECL_KEYWORD(immutable, Immutable)
RESERVED_DECL_KEYWORD(module, Module)
RESERVED_DECL_KEYWORD(global, Global)
RESERVED_DECL_KEYWORD(register, Register)

// Statement keywords
STMT_KEYWORD(defer)
STMT_KEYWORD(if)
STMT_KEYWORD(else)
STMT_KEYWORD(for)
STMT_KEYWORD(in)
STMT_KEYWORD(while)
STMT_KEYWORD(return)
STMT_KEYWORD(break)
STMT_KEYWORD(continue)
STMT_KEYWORD(switch)
STMT_KEYWORD(case)
STMT_KEYWORD(default)

// Expression keywords
EXPR_KEYWORD(true)
EXPR_KEYWORD(false)
EXPR_KEYWORD(null)
EXPR_KEYWORD(move)

// Pattern keywords
PAT_KEYWORD(_)

// Punctuators
// Punctuators.
PUNCTUATOR(l_paren, "(")
PUNCTUATOR(r_paren, ")")
PUNCTUATOR(l_brace, "{")
PUNCTUATOR(r_brace, "}")
PUNCTUATOR(l_square, "[")
PUNCTUATOR(r_square, "]")
PUNCTUATOR(l_angle, "<")
PUNCTUATOR(r_angle, ">")
PUNCTUATOR(period, ".")
PUNCTUATOR(star, "*")
PUNCTUATOR(starequal,   "*=")
PUNCTUATOR(period_prefix, ".")
PUNCTUATOR(pipe,                "|")
PUNCTUATOR(doublepipe,           "||")
PUNCTUATOR(pipeequal,           "|=")
PUNCTUATOR(ellipsis,  "...")
PUNCTUATOR(comma, ",")
PUNCTUATOR(colon, ":")
PUNCTUATOR(doublecolon,"::")
PUNCTUATOR(semi, ";")
PUNCTUATOR(equal, "=")
PUNCTUATOR(doubleequal, "==")
PUNCTUATOR(at_sign, "@")
PUNCTUATOR(pound, "#")
PUNCTUATOR(amp, "&")
PUNCTUATOR(amp_prefix, "&") //TODO: remove 
PUNCTUATOR(arrow, "->")
PUNCTUATOR(backtick, "`")
PUNCTUATOR(tick, "'")
PUNCTUATOR(backslash, "\\")
PUNCTUATOR(slash,      "/")
PUNCTUATOR(exclaim, "!") // if left-bound
PUNCTUATOR(exclaim_postfix, "!") // if left-bound
PUNCTUATOR(exclaimequal,  "!=")
PUNCTUATOR(question_postfix, "?") // if left-bound
PUNCTUATOR(question_infix, "?")   // if not left-bound
PUNCTUATOR(tilde,"~")
PUNCTUATOR(minus,  "-")
PUNCTUATOR(doubleminus,  "--")
PUNCTUATOR(minusequal,  "-=")
PUNCTUATOR(plus,         "+")
PUNCTUATOR(doubleplus,   "++")
PUNCTUATOR(plusequal,    "+=")
PUNCTUATOR(percent,      "%")

// Pound keywords
POUND_KEYWORD(if)
POUND_KEYWORD(else)
POUND_KEYWORD(endif)

#undef TOKEN
#undef KEYWORD
#undef DECL_KEYWORD
#undef ACTIVE_KEYWORD
#undef ACTIVE_DECL_KEYWORD
#undef RESERVED_DECL_KEYWORD
#undef DEPRECATED_DECL_KEYWORD
#undef STMT_KEYWORD
#undef EXPR_KEYWORD
#undef PAT_KEYWORD
#undef POUND_KEYWORD
#undef PUNCTUATOR
#undef LITERAL
#undef MISC
